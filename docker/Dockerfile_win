# Windows版本的Dockerfile
# 使用多阶段构建优化镜像大小

# 第一阶段：基础镜像 - 安装共同依赖
FROM python:3.10-windowsservercore-ltsc2022 AS builder

# 设置PowerShell作为默认Shell
SHELL ["powershell", "-Command", "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"]

# 验证Python安装
RUN python --version && pip --version

# 创建应用目录
WORKDIR C:/app

# 设置HuggingFace缓存目录环境变量
ENV HF_HOME=C:/app/models
ENV TRANSFORMERS_CACHE=C:/app/models
ENV HF_DATASETS_CACHE=C:/app/models

# 复制requirements文件
COPY ../requirements_win.txt .

# 安装Python依赖
RUN pip install --no-cache-dir -r requirements_win.txt

# 第二阶段：模型下载器 - 在此阶段下载模型
FROM builder AS model-downloader

# 安装git（用于模型下载）
RUN iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1')); \
    choco install -y git --params "'/GitAndUnixToolsOnPath'"

# 添加Git到PATH
ENV PATH="C:\\Program Files\\Git\\cmd;${PATH}"

# 创建模型缓存目录
RUN mkdir C:/app/models

# 修改download_models.py脚本以适应Windows路径
COPY ./docker/download_models.py .
RUN powershell -Command "(Get-Content download_models.py) -replace '/app/models', 'C:/app/models' | Set-Content download_models.py"

# 在构建时下载模型到镜像中
RUN python download_models.py

# 第三阶段：运行镜像 - 最终的应用镜像
FROM builder

# 从第二阶段复制下载好的模型
COPY --from=model-downloader C:/app/models C:/app/models

# 复制应用文件
COPY . .

# 安装curl（用于健康检查）
RUN choco install -y curl

# 暴露Streamlit端口
EXPOSE 8501

# 健康检查
HEALTHCHECK CMD ["powershell", "-Command", "try { $response = Invoke-WebRequest -Uri http://localhost:8501/_stcore/health -UseBasicParsing; if($response.StatusCode -eq 200) { exit 0 } else { exit 1 }; } catch { exit 1 }"]

# 启动Streamlit应用
ENTRYPOINT ["python", "-m", "streamlit", "run", "Home.py", "--server.port=8501", "--server.address=0.0.0.0"]
